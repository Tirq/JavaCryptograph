package com.tirq.crypto.main.hash;

import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.LayoutStyle.ComponentPlacement;

import com.tirq.crypto.utils.CryptoUtils;
import java.awt.Font;

/**
 * Exemplo usando o console para gerar hash(MD5,SHA-1,SHA-256,SHA512) de string informada com swing
 * 
 * @author Tirq
 * 
 */
public class MainHashTextSwing {

	private JFrame frameHash;

	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					MainHashTextSwing window = new MainHashTextSwing();
					window.frameHash.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	public MainHashTextSwing() {
		initialize();
	}

	private void initialize() {
		frameHash = new JFrame();
		frameHash.setTitle("Hash");
		frameHash.setResizable(false);
		frameHash.setBounds(100, 100, 700, 313);
		frameHash.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		JLabel lblTextToHash = new JLabel("Text to hash:");
		JScrollPane scrollPaneText = new JScrollPane();
		final JTextArea textAreaText = new JTextArea();
		textAreaText.setFont(new Font("SansSerif", Font.PLAIN, 12));
		scrollPaneText.setViewportView(textAreaText);

		JLabel lblHash = new JLabel("Hash:");
		JScrollPane scrollPaneHash = new JScrollPane();
		final JTextArea textAreaHash = new JTextArea();
		textAreaHash.setFont(new Font("SansSerif", Font.PLAIN, 12));
		scrollPaneHash.setViewportView(textAreaHash);

		JButton btnNewButton = new JButton("Hash");
		btnNewButton.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				try {
					String msg = textAreaText.getText();
					StringBuilder sb = new StringBuilder();
					for (String alg : CryptoUtils.ALGORITHMS) {
						byte[] byteGerado = CryptoUtils.digest(msg.getBytes(),
								alg);
						String hash = CryptoUtils
								.byteArrayToHexString(byteGerado);
						sb.append(alg + ": " + hash + "\n");
					}
					textAreaHash.setText(sb.toString());
				} catch (Exception e2) {
					textAreaHash.setText(e2.getMessage());
				}
			}
		});
		GroupLayout groupLayout = new GroupLayout(frameHash.getContentPane());
		groupLayout
				.setHorizontalGroup(groupLayout
						.createParallelGroup(Alignment.LEADING)
						.addGroup(
								groupLayout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												groupLayout
														.createParallelGroup(
																Alignment.LEADING)
														.addComponent(
																scrollPaneText,
																GroupLayout.DEFAULT_SIZE,
																414,
																Short.MAX_VALUE)
														.addComponent(
																scrollPaneHash,
																Alignment.TRAILING,
																GroupLayout.DEFAULT_SIZE,
																414,
																Short.MAX_VALUE)
														.addGroup(
																groupLayout
																		.createSequentialGroup()
																		.addComponent(
																				lblHash)
																		.addPreferredGap(
																				ComponentPlacement.RELATED,
																				297,
																				Short.MAX_VALUE)
																		.addComponent(
																				btnNewButton))
														.addComponent(
																lblTextToHash))
										.addContainerGap()));
		groupLayout.setVerticalGroup(groupLayout.createParallelGroup(
				Alignment.TRAILING)
				.addGroup(
						groupLayout
								.createSequentialGroup()
								.addContainerGap()
								.addComponent(lblTextToHash)
								.addPreferredGap(ComponentPlacement.RELATED,
										GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)
								.addComponent(scrollPaneText,
										GroupLayout.PREFERRED_SIZE, 73,
										GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(ComponentPlacement.RELATED)
								.addGroup(
										groupLayout
												.createParallelGroup(
														Alignment.BASELINE)
												.addComponent(lblHash)
												.addComponent(btnNewButton))
								.addPreferredGap(ComponentPlacement.RELATED)
								.addComponent(scrollPaneHash,
										GroupLayout.PREFERRED_SIZE, 123,
										GroupLayout.PREFERRED_SIZE)
								.addContainerGap()));

		frameHash.getContentPane().setLayout(groupLayout);
	}

}
