package com.tirq.crypto.utils;

import java.security.InvalidKeyException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.List;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;

/**
 * Utilitário para gerar hash(MD5 e SHA) e critografar (AES,RC4)
 * 
 * @author Tirq
 */
public final class CryptoUtils {

	private static final String hexDigits = "0123456789abcdef";

	public static final List<String> ALGORITHMS = Arrays.asList("MD5", "SHA-1", "SHA-256", "SHA-512");

	private static final String AES = "AES";
	private static final String AES_INSTANCE = "AES/ECB/NoPadding";
	private static final String RC4 = "RC4";
	private static final String RC4_INSTANCE = "RC4/ECB/NoPadding";

	/**
	 * Realiza um digest em um array de bytes através do algoritmo especificado
	 * 
	 * @param input
	 *            - O array de bytes a ser criptografado
	 * @param algoritmo
	 *            - O algoritmo a ser utilizado
	 * @return byte[] - O resultado da criptografia
	 * @throws NoSuchAlgorithmException
	 *             - Caso o algoritmo fornecido não seja válido
	 */
	public static byte[] digest(byte[] input, String algorithm) throws NoSuchAlgorithmException {
		MessageDigest md = MessageDigest.getInstance(algorithm);
		md.reset();
		return md.digest(input);
	}

	/**
	 * Converte o array de bytes em uma representação hexadecimal.
	 * 
	 * @param input
	 *            - O array de bytes a ser convertido.
	 * @return Uma String com a representação hexa do array
	 */
	public static String byteArrayToHexString(byte[] b) {
		StringBuffer buf = new StringBuffer();
		for (int i = 0; i < b.length; i++) {
			int j = ((int) b[i]) & 0xFF;
			buf.append(hexDigits.charAt(j / 16));
			buf.append(hexDigits.charAt(j % 16));
		}
		return buf.toString();
	}

	/**
	 * Converte uma String hexa no array de bytes correspondente.
	 * 
	 * @param hexa
	 *            - A String hexa
	 * @return O vetor de bytes
	 * @throws IllegalArgumentException
	 *             - Caso a String não sej auma representação haxadecimal válida
	 */
	public static byte[] hexStringToByteArray(String hexa) throws IllegalArgumentException {
		if (hexa.length() % 2 != 0) {
			throw new IllegalArgumentException("String hexa inválida");
		}
		byte[] b = new byte[hexa.length() / 2];
		for (int i = 0; i < hexa.length(); i += 2) {
			b[i / 2] = (byte) ((hexDigits.indexOf(hexa.charAt(i)) << 4) | (hexDigits.indexOf(hexa.charAt(i + 1))));
		}
		return b;
	}

	/**
	 * recebe um array de bytes contendo o conteúdo para ser criptografado, um array de bytes contendo a chave para criptografar e um boleano para
	 * decidir se será AES ou RC4 e retorna um array de bytes contendo um array de bytes em hexadecimal com o conteúdo gerado
	 */
	public static byte[] encode(byte[] input, String key, boolean aes) throws NoSuchAlgorithmException, InvalidKeyException,
			IllegalBlockSizeException, BadPaddingException, NoSuchPaddingException {
		SecretKeySpec skeySpec = new SecretKeySpec(hashKey(key).getBytes(), aes ? AES : RC4);
		Cipher cipher = Cipher.getInstance(aes ? AES_INSTANCE : RC4_INSTANCE);
		cipher.init(Cipher.ENCRYPT_MODE, skeySpec);
		byte[] encrypted = cipher.doFinal(input);
		return encrypted;
	}

	/**
	 * recebe um array de bytes contendo o conteúdo para ser descriptografado, um array de bytes contendo a chave para descriptografar e um boleano
	 * para decidir se será AES ou RC4 e retorna um array de bytes contendo um array de bytes em hexadecimal com o conteúdo gerado
	 */
	public static byte[] decode(byte[] input, String key, boolean aes) throws NoSuchAlgorithmException, InvalidKeyException,
			IllegalBlockSizeException, BadPaddingException, NoSuchPaddingException {
		SecretKeySpec skeySpec = new SecretKeySpec(hashKey(key).getBytes(), aes ? AES : RC4);
		Cipher cipher = Cipher.getInstance(aes ? AES_INSTANCE : RC4_INSTANCE);
		cipher.init(Cipher.DECRYPT_MODE, skeySpec);
		byte[] decrypted = cipher.doFinal(input);
		return decrypted;
	}

	/**
	 * Recebe senha informada pelo usuário e criar hash com mmd5 para ser usada como key.
	 * 
	 */
	public static String hashKey(String key) throws NoSuchAlgorithmException {
		return CryptoUtils.byteArrayToHexString(digest(key.getBytes(), "MD5")).substring(0, 16);
	}

	/**
	 * Retorna string preenchida com null para ficar com tamanho de 16 digitos
	 * 
	 * @param String
	 *            original
	 * @return String preenchida
	 */
	public static String nullPadString(String original) {
		StringBuffer output = new StringBuffer(original);
		int remain = output.length() % 16;
		if (remain != 0) {
			remain = 16 - remain;
			for (int i = 0; i < remain; i++) {
				output.append((char) 0);
			}
		}
		return output.toString();
	}

	/**
	 * Recebe array de bytes em hexadecimal e converte em String
	 * 
	 * @param hex
	 * @return String
	 */
	public static String fromHex(byte[] hex) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < hex.length; i++) {
			sb.append(Integer.toString((hex[i] & 0xff) + 0x100, 16).substring(1));
		}
		return sb.toString();
	}

	/**
	 * Recebe String e converte em array de bytes hexadecimal
	 * 
	 * @param hex
	 * @return String
	 */
	public static byte[] toHex(String s) {
		int len = s.length();
		byte[] data = new byte[len / 2];
		for (int i = 0; i < len; i += 2) {
			data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4) + Character.digit(s.charAt(i + 1), 16));
		}
		return data;
	}
}
